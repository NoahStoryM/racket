#lang zuo

(require "harness.zuo")

(alert "config")

(define Mf-config (build-path tmp-dir "Mf-config"))

(define (config->hash content [overrides (hash)] [merge-env? #f])
  (display-to-file content Mf-config :truncate)
  (config-file->hash Mf-config overrides merge-env?))

(check (config->hash "") (hash))
(check (config->hash "" (hash 'X "x")) (hash 'X "x"))
(check (config->hash "This is not a confg line" (hash 'X "x")) (hash 'X "x"))
(check (config->hash "Comment # no=6" (hash 'X "x")) (hash 'X "x"))

(check (config->hash "X=5") (hash 'X "5"))
(check (config->hash "X =5") (hash 'X "5"))
(check (config->hash "X= 5   ") (hash 'X "5"))
(check (config->hash "  X = 5   ") (hash 'X "5"))
(check (config->hash "\n\n  X = 5   \n\n") (hash 'X "5"))
(check (config->hash "X = 5\\\n1") (hash 'X "51"))

(check (config->hash "X_1=5") (hash 'X_1 "5"))
(check (config->hash "abcdefg_ZXSGFH_=5") (hash 'abcdefg_ZXSGFH_ "5"))
(check (config->hash "123=5") (hash (string->symbol "123") "5"))
(check (config->hash "1%23=5") (hash))
(check (config->hash "x%23=5") (hash))

(check (config->hash "X=5\nY=8") (hash 'X "5" 'Y "8"))
(check (config->hash "X=5\nX=8") (hash 'X "8"))
(check (config->hash "X=5\nX=8" (hash 'X "0")) (hash 'X "0"))
(check (config->hash "X=5\nY=8" (hash 'X "0")) (hash 'X "0" 'Y "8"))

(check (config->hash "X=5 # Comment after") (hash 'X "5"))
(check (config->hash "X=5 # Comment after\nY=8") (hash 'X "5" 'Y "8"))
(check (config->hash "X=5 \\# 7") (hash 'X "5 # 7"))
(check (config->hash "X=5 \\\\# 7") (hash 'X "5 \\# 7"))
(check (config->hash "X=5# \\\\# 7") (hash 'X "5"))
(check (config->hash "X=# # #") (hash 'X ""))
(check (config->hash "X = 5\\\n# 1 \\\n 2") (hash 'X "5"))
(check (config->hash "X = 5\\\n 1 \\\n 2") (hash 'X "5 1  2"))

(let ([path-val (ormap (lambda (p) (and (equal? (car p) "PATH")
                                        (cdr p)))
                       (hash-ref (runtime-env) 'env))])
  (when path-val
    (check (hash-ref (config->hash "X = 5\\\n 1 \\\n 2" (hash) #t) 'PATH #f) #f)))

(run-zuo* '("")
          (~a "#lang zuo\n"
              (~s `(let ([c (config-file->hash ,Mf-config)])
                     (list (hash-ref c 'EXAMPLE_1 #f)
                           (hash-ref c 'EXAMPLE_2 #f)
                           (hash-ref c 'EXAMPLE_3 #f)))))
          (lambda (status out err)
            (check err "")
            (check status 0)
            (check out "(list \"1\" \"2\" #f)\n"))
          (list* (cons "EXAMPLE_1" "1")
                 (cons "EXAMPLE_2" "2")
                 (cons "ZUO_CONFIG_ENV_VARS" "EXAMPLE_1 EXAMPLE_2")
                 (hash-ref (runtime-env) 'env)))
          
(rm* Mf-config)
